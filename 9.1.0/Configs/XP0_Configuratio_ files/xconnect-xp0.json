{
    "Parameters": {
        "Package": {
            "Type": "string",
            "Description": "The path to the Web Deploy package to deploy.",
            "DefaultValue" : ""
        },
        "LicenseFile": {
            "Type": "string",
            "Description": "The path to the Sitecore license file.",
            "DefaultValue" : ".\\Licence.xml"
        },
        "SiteName": {
            "Type": "string",
            "DefaultValue": "XConnect",
            "Description": "The name of the site to be deployed."
        },
        "XConnectCert": {
            "Type": "string",
            "Description": "The certificate to use for encryption. Provide the name or the thumbprint.",
            "DefaultValue" : ""
        },
        "SqlDbPrefix": {
            "Type": "string",
            "Description": "The prefix used for all Sql databases.",
            "DefaultValue" : ""
        },
        "SolrCorePrefix": {
            "Type": "string",
            "Description": "The prefix used for all Solr cores.",
            "DefaultValue" : ""
        },
        "SSLCert": {
            "Type": "string",
            "Description": "The certificate to use for HTTPS web bindings. Provide the name or the thumbprint. If not provided a certificate will be generated.",
            "DefaultValue": ""
        },
        "SqlAdminUser": {
            "Type": "string",
            "DefaultValue": "sa",
            "Description": "The Sql admin user account to use when installing databases."
        },
        "SqlAdminPassword": {
            "Type": "string",
            "DefaultValue": "12345",
            "Description": "The Sql admin password to use when installing databases."
        },
        "SolrUrl": {
            "Type": "string",
            "DefaultValue": "https://localhost:8983/solr",
            "Description": "The Solr instance to use."
        },
        "SqlCollectionUser": {
            "Type": "string",
            "DefaultValue": "collectionuser",
            "Description": "The Sql admin user account to use when installing databases."
        },
        "SqlCollectionPassword": {
            "Type": "string",
            "DefaultValue": "Test12345",
            "Description": "The Sql admin password to use when installing databases."
        },
        "SqlProcessingPoolsUser": {
            "Type": "string",
            "DefaultValue": "poolsuser",
            "Description": "The Sql user for the Processing Pools connection string in Sitecore."
        },
        "SqlProcessingPoolsPassword": {
            "Type": "string",
            "DefaultValue": "Test12345",
            "Description": "The Sql password for the Processing Pools connection string in Sitecore."
        },
        "SqlReferenceDataUser": {
            "Type": "string",
            "DefaultValue": "referencedatauser",
            "Description": "The Sql user for the Reference Data connection string in Sitecore."
        },
        "SqlReferenceDataPassword": {
            "Type": "string",
            "DefaultValue": "Test12345",
            "Description": "The Sql password for the Reference Data connection string in Sitecore."
        },
        "SqlMarketingAutomationUser": {
            "Type": "string",
            "DefaultValue": "marketingautomationuser",
            "Description": "The Sql user for the Marketing Automation connection string in Sitecore."
        },
        "SqlMarketingAutomationPassword": {
            "Type": "string",
            "DefaultValue": "Test12345",
            "Description": "The Sql password for the Marketing Automation connection string in Sitecore."
        },
        "SqlMessagingUser": {
            "Type": "string",
            "DefaultValue": "messaginguser",
            "Description": "The Sql user for the Messaging connection string in Sitecore."
        },
        "SqlMessagingPassword": {
            "Type": "string",
            "DefaultValue": "Test12345",
            "Description": "The Sql password for the Messaging connection string in Sitecore."
        },
        "SqlProcessingEngineUser": {
            "Type": "string",
            "DefaultValue": "processingengineuser",
            "Description": "The Sql user for the Processing Engine Tasks and Storage database connection strings in Sitecore."
        },
        "SqlProcessingEnginePassword": {
            "Type": "string",
            "DefaultValue": "Test12345",
            "Description": "The Sql password for the Processing Engine Tasks and Storage database connection strings in Sitecore."
        },
        "SqlReportingUser": {
            "Type": "string",
            "DefaultValue": "reportinguser",
            "Description": "The Sql user for the Reporting connection string in Sitecore."
        },
        "SqlReportingPassword": {
            "Type": "string",
            "DefaultValue": "Test12345",
            "Description": "The Sql password for the Reporting connection string in Sitecore."
        },
        "SqlServer": {
            "Type": "string",
            "DefaultValue": ".\\SQLSERVER",
            "Description": "The Sql Server where databases will be installed."
        },
        "XConnectEnvironment": {
            "Type": "string",
            "DefaultValue": "Development",
            "Description": "The configuration environment for this instance."
        },
        "XConnectLogLevel": {
            "Type": "string",
            "DefaultValue": "Information",
            "Description": "The level of log information to output."
        },
        "MachineLearningServerUrl": {
            "Type": "string",
            "DefaultValue": "",
            "Description": "The Microsoft Machine Learning Server instance to use."
        },
        "MachineLearningServerBlobEndpointCertificatePath": {
            "Type": "string",
            "DefaultValue": "",
            "Description": "The Machine Learning Server Blob Storage WebApi Endpoint Certificate Path."
        },
        "MachineLearningServerBlobEndpointCertificatePassword": {
            "Type": "string",
            "DefaultValue": "",
            "Description": "The Machine Learning Server Blob Storage WebApi Endpoint Certificate Password."
        },
        "MachineLearningServerTableEndpointCertificatePath": {
            "Type": "string",
            "DefaultValue": "",
            "Description": "The Machine Learning Server Table Storage WebApi Endpoint Certificate Path."
        },
        "MachineLearningServerTableEndpointCertificatePassword": {
            "Type": "string",
            "DefaultValue": "",
            "Description": "The Machine Learning Server Table Storage WebApi Endpoint Certificate Password."
        },
        "MachineLearningServerEndpointCertificationAuthorityCertificatePath": {
            "Type": "string",
            "DefaultValue": "",
            "Description": "The path to certificate of certification authority that issued certificates for Machine Learning Server Blob and Table storage endpoints."
        }
    },
    "Variables": {
        "Sharding.Database.Prefix": "[concat(parameter('SqlDbPrefix'), '_Xdb.Collection.Shard')]",

        "Sql.Database.ShardMapManager":     "[concat(variable('Sharding.Database.Prefix'), 'MapManager')]",
        "Sql.Database.Shard0":              "[concat(variable('Sharding.Database.Prefix'), '0')]",
        "Sql.Database.Shard1":              "[concat(variable('Sharding.Database.Prefix'), '1')]",
        "Sql.Database.Pools":               "[concat(parameter('SqlDbPrefix'), '_Processing.Pools')]",
        "Sql.Database.MarketingAutomation": "[concat(parameter('SqlDbPrefix'), '_MarketingAutomation')]",
        "Sql.Database.Messaging":           "[concat(parameter('SqlDbPrefix'), '_Messaging')]",
        "Sql.Database.Reference":           "[concat(parameter('SqlDbPrefix'), '_ReferenceData')]",
        "Sql.Database.Reporting":           "[concat(parameter('SqlDbPrefix'), '_Reporting')]",
        "Sql.Database.ProcessingEngineTasks":   "[concat(parameter('SqlDbPrefix'), '_ProcessingEngineTasks')]",
        "Sql.Database.ProcessingEngineStorage": "[concat(parameter('SqlDbPrefix'), '_ProcessingEngineStorage')]",

        "Security.CertificateStore":                "Cert:\\Localmachine\\My",
        "Security.SSL.CertificateThumbprint":       "[GetCertificateThumbprint(parameter('SSLCert'), variable('Security.CertificateStore'))]",
        "Security.XConnect.CertificateThumbprint":  "[GetCertificateThumbprint(parameter('XConnectCert'), variable('Security.CertificateStore'))]",
        "Security.XConnect.CertificatePath":        "[joinpath(variable('Security.CertificateStore'), variable('Security.XConnect.CertificateThumbprint'))]",

        "Site.PhysicalPath": "[joinpath(environment('SystemDrive'), 'inetpub', 'wwwroot', parameter('SiteName'))]",
        "Site.DataFolder":  "[joinpath(variable('Site.PhysicalPath'), 'App_Data')]",

        "Services.IndexWorker.InstallPath": "[joinpath(variable('Site.DataFolder'), 'jobs','continuous','IndexWorker')]",
        "Services.IndexWorker.Name":        "[concat(parameter('SiteName'), '-IndexWorker')]",

        "Services.MarketingAutomationEngine.InstallPath":   "[joinpath(variable('Site.DataFolder'), 'jobs','continuous','AutomationEngine')]",
        "Services.MarketingAutomationEngine.Name":          "[concat(parameter('SiteName'), '-MarketingAutomationService')]",

        "Services.ProcessingEngine.InstallPath":   "[joinpath(variable('Site.DataFolder'), 'jobs','continuous','ProcessingEngine')]",
        "Services.ProcessingEngine.Name":          "[concat(parameter('SiteName'), '-ProcessingEngineService')]",

        "Endpoint.MarketingAutomation": "[concat('https://', parameter('SiteName'))]",

        "Endpoint.ReferenceData": "[concat(variable('Endpoint.MarketingAutomation'), '/refdata')]",

        "Endpoint.Collection": "[concat('https://', parameter('SiteName'))]",

        "Endpoint.Processing.BlobStorage": "[concat('https://', parameter('SiteName'))]",
        "Endpoint.Processing.TableStorage": "[concat('https://', parameter('SiteName'))]",

        "Sharding.Root.Path":   "[joinpath(variable('Site.DataFolder'), 'collectiondeployment')]",
        "Sharding.Tool.Path":   "[joinpath(variable('Sharding.Root.Path'), 'Sitecore.Xdb.Collection.Database.SqlShardingDeploymentTool.exe')]",
        "Sharding.DacPac.Path": "[joinpath(variable('Sharding.Root.Path'), 'Sitecore.Xdb.Collection.Database.Sql.dacpac')]",
        "Sharding.Map.Names": [
            "ContactIdShardMap",
            "DeviceProfileIdShardMap",
            "ContactIdentifiersIndexShardMap"
        ],
        "Sharding.DB.Connection": "[sqlconnectionstring(parameter('SqlServer'), '', parameter('SqlAdminUser'), parameter('SqlAdminPassword'))]",
        "Sharding.Edition": "Basic",
        "Sharding.SqlCmd.Path.CreateShardApplicationDatabaseServerLogin":   "[joinpath(variable('Sharding.Root.Path'), 'CreateShardApplicationDatabaseServerLogin.sql')]",
        "Sharding.SqlCmd.Path.CreateShardManagerApplicationDatabaseUser":   "[joinpath(variable('Sharding.Root.Path'), 'CreateShardManagerApplicationDatabaseUser.sql')]",
        "Sharding.SqlCmd.Path.CreateShardApplicationDatabaseUser":          "[joinpath(variable('Sharding.Root.Path'), 'CreateShardApplicationDatabaseUser.sql')]",

        "Xdb.Name":         "[concat(parameter('SolrCorePrefix'), '_xdb')]",
        "Xdb.Rebuild.Name": "[concat(variable('Xdb.Name'), '_rebuild')]",
        "Solr.Url.Xdb":     "[concat(parameter('SolrUrl'), '/', variable('Xdb.Name'))]",

        "Solr.Config.Path": "[joinpath(variable('Site.DataFolder'), 'solrcommands', 'schema.json')]"
    },
    "Tasks": {
        "CreatePaths": {
            "Description": "Ensure the destination path for the site exists.",
            "Type": "EnsurePath",
            "Params": {
                "Exists": [
                    "[variable('Site.PhysicalPath')]"
                ]
            }
        },
        "CreateAppPool": {
            "Description": "Creates or updates the app pool.",
            "Type": "AppPool",
            "Params": {
                "Name": "[parameter('SiteName')]",
                "Properties": {
                    "ProcessModel": {
                        "identityType": "ApplicationPoolIdentity"
                    }
                }
            }
        },
        "SetAppPoolCertStorePermissions": {
            "Description": "Set permissions for the App Pool User to access the client certificate.",
            "Type": "FilePermissions",
            "Params": {
                "Path": "[ResolveCertificatePath(variable('Security.XConnect.CertificatePath'))]",
                "Rights": [
                    {
                        "User": "[concat('IIS AppPool\\', parameter('SiteName'))]",
                        "FileSystemRights": [ "Read" ],
                        "InheritanceFlags": [ "None" ]
                    }
                ]
            }
        },
        "CreateWebsite": {
            "Description": "Creates or updates the IIS website instance.",
            "Type": "Website",
            "Params": {
                "Name": "[parameter('SiteName')]",
                "ApplicationPool": "[parameter('SiteName')]",
                "PhysicalPath": "[variable('Site.PhysicalPath')]"
            }
        },
        "StopWebsite": {
            "Description": "Stops the website if it is running.",
            "Type": "ManageWebsite",
            "Params": {
                "Name": "[parameter('SiteName')]",
                "Action": "Stop"
            }
        },
        "StopAppPool": {
            "Description": "Stops the app pool if it is running.",
            "Type": "ManageAppPool",
            "Params": {
                "Name": "[parameter('SiteName')]",
                "Action": "Stop"
            }
        },
        "StopServices": {
            "Description": "Stops the services if they running.",
            "Type": "ManageService",
            "Params": [
                {
                    "Name": "[variable('Services.IndexWorker.Name')]",
                    "Status": "Stopped",
                    "PostDelay": 3000
                },
                {
                    "Name": "[variable('Services.MarketingAutomationEngine.Name')]",
                    "Status": "Stopped",
                    "PostDelay": 3000
                },
                {
                    "Name": "[variable('Services.ProcessingEngine.Name')]",
                    "Status": "Stopped",
                    "PostDelay": 3000
                }
            ]
        },
        "RemoveServices": {
            "Description": "Removes the current service.",
            "Type": "RemoveService",
            "Params": [
                { "Name": "[variable('Services.IndexWorker.Name')]" },
                { "Name": "[variable('Services.MarketingAutomationEngine.Name')]" },
                { "Name": "[variable('Services.ProcessingEngine.Name')]" }
            ]
        },
        "RemoveDefaultBinding": {
            "Description": "Removes the default *:80 web binding",
            "Type": "WebBinding",
            "Params": {
                "SiteName": "[parameter('SiteName')]",
                "Remove": [ { "Port": "80", "IPAddress": "*" } ]
            }
        },
        "CreateBindingsWithThumbprint": {
            "Description": "Configures the site bindings for the website.",
            "Type": "WebBinding",
            "Params": {
                "SiteName": "[parameter('SiteName')]",
                "Add": [
                    {
                        "HostHeader": "[parameter('SiteName')]",
                        "Protocol": "https",
                        "SSLFlags": 1,
                        "Thumbprint": "[variable('Security.SSL.CertificateThumbprint')]"
                    }
                ]
            },
            "Skip": "[not(parameter('SSLCert'))]"
        },
        "SetClientCertificatePermissions": {
            "Type": "WebsiteClientCert",
            "Params": {
                "SiteName": "[parameter('SiteName')]",
                "Setting": "Accept"
            }
        },
        "SupportListManagerLargeUpload": {
            "Type": "IISConfiguration",
            "Params": {
                "SiteName": "[parameter('SiteName')]",
                "ConfigPath": "system.webServer/serverRuntime",
                "Key": "uploadReadAheadSize",
                "Value": 491520000
            }
        },
        "CreateHostHeader": {
            "Description": "Sets a hostheader for the website.",
            "Type": "HostHeader",
            "Params": {
                "HostName": "[parameter('SiteName')]"
            }
        },
        "SetPermissions": {
            "Description": "Sets permissions for the app pool user.",
            "Type": "FilePermissions",
            "Params": {
                "Path": "[variable('Site.PhysicalPath')]",
                "Rights": [
                    {
                        "User": "[concat('IIS AppPool\\', parameter('SiteName'))]",
                        "FileSystemRights": "FullControl",
                        "InheritanceFlags": [ "ContainerInherit", "ObjectInherit" ]
                    }
                ]
            }
        },
        "InstallWDP": {
            "Description": "Syncs the web deploy package with the website.",
            "Type": "WebDeploy",
            "Params": {
                "Verb": "Sync",
                "Arguments": {
                    "Source": {
                        "Package": "[resolvepath(parameter('Package'))]"
                    },
                    "Dest": "Auto",
                    "SetParam": [
                        { "Name": "IIS Web Application Name", "Value": "[parameter('SiteName')]" },
                        { "Name": "Database Server Name", "Value": "[parameter('SqlServer')]" },
                        { "Name": "Database Admin User Name", "Value": "[parameter('SqlAdminUser')]" },
                        { "Name": "Database Admin User Password", "Value": "[parameter('SqlAdminPassword')]" },
                        { "Name": "Collection Database Server Name", "Value": "[parameter('SqlServer')]" },
                        { "Name": "Collection Shard Map Manager Database Name", "Value": "[variable('Sql.Database.ShardMapManager')]" },
                        { "Name": "Collection Shard 0 Database Name", "Value": "[variable('Sql.Database.Shard0')]" },
                        { "Name": "Collection Shard 1 Database Name", "Value": "[variable('Sql.Database.Shard1')]" },
                        { "Name": "Processing Pools Database Name", "Value": "[variable('Sql.Database.Pools')]" },
                        { "Name": "Marketing Automation Database Name", "Value": "[variable('Sql.Database.MarketingAutomation')]" },
                        { "Name": "Messaging Database Name", "Value": "[variable('Sql.Database.Messaging')]" },
                        { "Name": "Reference Data Database Name", "Value": "[variable('Sql.Database.Reference')]" },
                        { "Name": "Reporting Database Name", "Value": "[variable('Sql.Database.Reporting')]" },
                        { "Name": "Processing Engine Tasks Database Name", "Value":  "[variable('Sql.Database.ProcessingEngineTasks')]" },
                        { "Name": "Processing Engine Storage Database Name", "Value":  "[variable('Sql.Database.ProcessingEngineStorage')]" },
                        { "Name": "Search SOLR Core Application Connection String", "Value": "[variable('Solr.Url.Xdb')]" },
                        { "Name": "XConnect Server Configuration Environment", "Value": "[parameter('XConnectEnvironment')]" },
                        { "Name": "XConnect Server Certificate Validation Thumbprint", "Value": "[variable('Security.XConnect.CertificateThumbprint')]" },
                        { "Name": "XConnect Server Log Level", "Value": "[parameter('XConnectLogLevel')]" },
                        { "Name": "Marketing Automation Engine Xconnect Collection Client Endpoint", "Value": "[variable('Endpoint.MarketingAutomation')]" },
                        { "Name": "Marketing Automation Engine Xconnect Collection Client Certificate Thumbprint", "Value": "[variable('Security.XConnect.CertificateThumbprint')]" },
                        { "Name": "Marketing Automation Engine Xdb Reference Data Endpoint", "Value": "[variable('Endpoint.ReferenceData')]" },
                        { "Name": "Marketing Automation Engine Xdb Reference Data Client Certificate Thumbprint", "Value": "[variable('Security.XConnect.CertificateThumbprint')]" },
                        { "Name": "Processing Engine Xconnect Collection Client Endpoint", "Value": "[variable('Endpoint.Collection')]" },
                        { "Name": "Processing Engine Xconnect Collection Client Certificate Thumbprint", "Value": "[variable('Security.XConnect.CertificateThumbprint')]" },
                        { "Name": "Processing Engine Xconnect Search Client Endpoint", "Value": "[variable('Endpoint.Collection')]" },
                        { "Name": "Processing Engine Xconnect Search Client Certificate Thumbprint", "Value": "[variable('Security.XConnect.CertificateThumbprint')]" },
                        { "Name": "Processing Engine Blob Storage WebApi Endpoint", "Value": "[variable('Endpoint.Processing.BlobStorage')]" },
                        { "Name": "Processing Engine Table Storage WebApi Endpoint", "Value": "[variable('Endpoint.Processing.TableStorage')]" },
                        { "Name": "Processing Engine Machine Learning Server Endpoint", "Value": "[parameter('MachineLearningServerUrl')]" },
                        { "Name": "Collection Database Application User Name", "Value": "[parameter('SqlCollectionUser')]" },
                        { "Name": "Collection Database Application User Password", "Value": "[parameter('SqlCollectionPassword')]" },
                        { "Name": "Processing Pool Database Application User Name", "Value": "[parameter('SqlProcessingPoolsUser')]" },
                        { "Name": "Processing Pool Database Application User Password", "Value": "[parameter('SqlProcessingPoolsPassword')]" },
                        { "Name": "Reference Data Database Application User Name", "Value": "[parameter('SqlReferenceDataUser')]" },
                        { "Name": "Reference Data Database Application User Password", "Value": "[parameter('SqlReferenceDataPassword')]" },
                        { "Name": "Reporting Database Application User Name", "Value": "[parameter('SqlReportingUser')]" },
                        { "Name": "Reporting Database Application User Password", "Value": "[parameter('SqlReportingPassword')]" },
                        { "Name": "Marketing Automation Database Application User Name", "Value": "[parameter('SqlMarketingAutomationUser')]" },
                        { "Name": "Marketing Automation Database Application User Password", "Value": "[parameter('SqlMarketingAutomationPassword')]" },
                        { "Name": "Messaging Database Application User Name", "Value": "[parameter('SqlMessagingUser')]" },
                        { "Name": "Messaging Database Application User Password", "Value": "[parameter('SqlMessagingPassword')]" },
                        { "Name": "Processing Engine Database Application User Name", "Value": "[parameter('SqlProcessingEngineUser')]" },
                        { "Name": "Processing Engine Database Application User Password", "Value": "[parameter('SqlProcessingEnginePassword')]" },
                        { "Name": "Machine Learning Server Blob Storage WebApi Endpoint Certificate Path", "Value": "[parameter('MachineLearningServerBlobEndpointCertificatePath')]" },
                        { "Name": "Machine Learning Server Blob Storage WebApi Endpoint Certificate Password", "Value": "[parameter('MachineLearningServerBlobEndpointCertificatePassword')]" },
                        { "Name": "Machine Learning Server Table Storage WebApi Endpoint Certificate Path", "Value": "[parameter('MachineLearningServerTableEndpointCertificatePath')]" },
                        { "Name": "Machine Learning Server Table Storage WebApi Endpoint Certificate Password", "Value": "[parameter('MachineLearningServerTableEndpointCertificatePassword')]" },
                        { "Name": "Machine Learning Server Storage WebApi Endpoint Certification Authority Certificate Path", "Value": "[parameter('MachineLearningServerEndpointCertificationAuthorityCertificatePath')]" }
                    ]
                }
            }
        },
        "SetLicense": {
            "Description": "Copies the license file to the instance data folder.",
            "Type": "Copy",
            "Params": {
                "Source": "[resolvepath(parameter('LicenseFile'))]",
                "Destination": "[variable('Site.DataFolder')]"
            }
        },
        "CreateBindingsWithDevelopmentThumbprint": {
            "Description": "Creates a new thumbprint with a custom CA",
            "Type": "AddWebFeatureSSL",
            "Params": {
                "HostName": "[parameter('SiteName')]",
                "OutputDirectory": "[variable('Site.DataFolder')]"
            },
            "Skip": "[parameter('SSLCert')]"
        },
        "SetServicesCertStorePermissions": {
            "Description": "Set permissions for the services to access the client certificate.",
            "Type": "FilePermissions",
            "Params": {
                "Path": "[ResolveCertificatePath(variable('Security.XConnect.CertificatePath'))]",
                "Rights": [
                    {
                        "User": "NT AUTHORITY\\LocalService",
                        "FileSystemRights": [ "Read" ],
                        "InheritanceFlags": [ "None" ]
                    }
                ]
            }
        },
        "CleanShards": {
            "Description": "Drop existing shards.",
            "Type": "Command",
            "Params": {
                "Path": "[variable('Sharding.Tool.Path')]",
                "Arguments": [
                    "/operation", "drop",
                    "/connectionstring", "[variable('Sharding.DB.Connection')]",
                    "/dbedition", "[variable('Sharding.Edition')]",
                    "/shardMapManagerDatabaseName", "[variable('Sql.Database.ShardMapManager')]",
                    "/shardMapNames", "[join(variable('Sharding.Map.Names'))]"
                ],
                "TaskName": "ShardingTool - Clean"
            }
        },
        "CreateShards": {
            "Description": "Create new shards.",
            "Type": "Command",
            "Params": {
                "Path": "[variable('Sharding.Tool.Path')]",
                "Arguments": [
                    "/operation", "create",
                    "/connectionstring", "[variable('Sharding.DB.Connection')]",
                    "/dbedition", "[variable('Sharding.Edition')]",
                    "/shardMapManagerDatabaseName", "[variable('Sql.Database.ShardMapManager')]",
                    "/shardMapNames", "[join(variable('Sharding.Map.Names'))]",
                    "/shardnumber", 2,
                    "/shardnameprefix", "[variable('Sharding.Database.Prefix')]",
                    "/shardnamesuffix", "\"\"",
                    "/dacpac", "[variable('Sharding.DacPac.Path')]"
                ],
                "TaskName": "ShardingTool - Create"
            }
        },
        "CreateShardApplicationDatabaseServerLoginSqlCmd": {
            "Description": "Create Collection Shard Database Server Login.",
            "Type": "Command",
            "Params": {
                "Path": "sqlcmd",
                "Arguments": [
                    "-i",
                    "[variable('Sharding.SqlCmd.Path.CreateShardApplicationDatabaseServerLogin')]",
                    "-S",
                    "[parameter('SqlServer')]",
                    "-U",
                    "[parameter('SqlAdminUser')]",
                    "-P",
                    "[parameter('SqlAdminPassword')]",
                    "-v",
                    "[concat('UserName=',parameter('SqlCollectionUser'))]",
                    "-v",
                    "[concat('Password=',parameter('SqlCollectionPassword'))]"
                ]
            }
        },
        "CreateShardManagerApplicationDatabaseUserSqlCmd": {
            "Description": "Create Collection Shard Manager Database User.",
            "Type": "Command",
            "Params": {
                "Path": "sqlcmd",
                "Arguments": [
                    "-i",
                    "[variable('Sharding.SqlCmd.Path.CreateShardManagerApplicationDatabaseUser')]",
                    "-S",
                    "[parameter('SqlServer')]",
                    "-U",
                    "[parameter('SqlAdminUser')]",
                    "-P",
                    "[parameter('SqlAdminPassword')]",
                    "-v",
                    "[concat('UserName=',parameter('SqlCollectionUser'))]",
                    "-v",
                    "[concat('ShardMapManagerDatabaseName=',variable('Sql.Database.ShardMapManager'))]"
                ]
            }
        },
        "CreateShard0ApplicationDatabaseUserSqlCmd": {
            "Description": "Create Collection Shard 0 Database User.",
            "Type": "Command",
            "Params": {
                "Path": "sqlcmd",
                "Arguments": [
                    "-i",
                    "[variable('Sharding.SqlCmd.Path.CreateShardApplicationDatabaseUser')]",
                    "-S",
                    "[parameter('SqlServer')]",
                    "-U",
                    "[parameter('SqlAdminUser')]",
                    "-P",
                    "[parameter('SqlAdminPassword')]",
                    "-v",
                    "[concat('UserName=',parameter('SqlCollectionUser'))]",
                    "-v",
                    "[concat('ShardDatabaseName=',variable('Sql.Database.Shard0'))]"
                ]
            }
        },
        "CreateShard1ApplicationDatabaseUserSqlCmd": {
            "Description": "Create Collection Shard 1 Database User.",
            "Type": "Command",
            "Params": {
                "Path": "sqlcmd",
                "Arguments": [
                    "-i",
                    "[variable('Sharding.SqlCmd.Path.CreateShardApplicationDatabaseUser')]",
                    "-S",
                    "[parameter('SqlServer')]",
                    "-U",
                    "[parameter('SqlAdminUser')]",
                    "-P",
                    "[parameter('SqlAdminPassword')]",
                    "-v",
                    "[concat('UserName=',parameter('SqlCollectionUser'))]",
                    "-v",
                    "[concat('ShardDatabaseName=',variable('Sql.Database.Shard1'))]"
                ]
            }
        },
        "CreateServicesLogPaths": {
            "Description": "Ensure the destination path for the site exists.",
            "Type": "EnsurePath",
            "Params": {
                "Exists": [
                    "[joinpath(variable('Services.IndexWorker.InstallPath'), 'App_Data', 'Logs')]",
                    "[joinpath(variable('Services.MarketingAutomationEngine.InstallPath'), 'App_Data', 'Logs')]",
                    "[joinpath(variable('Services.ProcessingEngine.InstallPath'), 'App_Data', 'Logs')]"
                ]
            }
        },
        "SetIndexWorkerServiceLicense": {
            "Description": "Copies the license file to the index worker service data folder.",
            "Type": "Copy",
            "Params": {
                "Source": "[resolvepath(parameter('LicenseFile'))]",
                "Destination": "[joinpath(variable('Services.IndexWorker.InstallPath'), 'App_Data')]"
            }
        },
        "SetMarketingAutomationServiceLicense": {
            "Description": "Copies the license file to the marketing automation service data folder.",
            "Type": "Copy",
            "Params": {
                "Source": "[resolvepath(parameter('LicenseFile'))]",
                "Destination": "[joinpath(variable('Services.MarketingAutomationEngine.InstallPath'), 'App_Data')]"
            }
        },
        "SetProcessingEngineServiceLicense": {
            "Description": "Copies the license file to the processing engine service data folder.",
            "Type": "Copy",
            "Params": {
                "Source": "[resolvepath(parameter('LicenseFile'))]",
                "Destination": "[joinpath(variable('Services.ProcessingEngine.InstallPath'), 'App_Data')]"
            }
        },
        "SetIndexWorkerServicePermissions": {
            "Description": "Set permissions for the Index Worker service.",
            "Type": "FilePermissions",
            "Params": {
                "Path": "[joinpath(variable('Services.IndexWorker.InstallPath'), 'App_Data', 'Logs')]",
                "Rights": [
                    {
                        "User": "NT AUTHORITY\\LocalService",
                        "FileSystemRights": [ "FullControl" ],
                        "InheritanceFlags": [ "ContainerInherit", "ObjectInherit" ]
                    }
                ]
            }
        },
        "SetMarketingAutomationServicePermissions": {
            "Description": "Set permissions for the Marketing Automation service.",
            "Type": "FilePermissions",
            "Params": {
                "Path": "[joinpath(variable('Services.MarketingAutomationEngine.InstallPath'), 'App_Data', 'Logs')]",
                "Rights": [
                    {
                        "User": "NT AUTHORITY\\LocalService",
                        "FileSystemRights": [ "FullControl" ],
                        "InheritanceFlags": [ "ContainerInherit", "ObjectInherit" ]
                    }
                ]
            }
        },
        "SetProcessingEngineServicePermissions": {
            "Description": "Set permissions for the Processing Engine service.",
            "Type": "FilePermissions",
            "Params": {
                "Path": "[joinpath(variable('Services.ProcessingEngine.InstallPath'), 'App_Data', 'Logs')]",
                "Rights": [
                    {
                        "User": "NT AUTHORITY\\LocalService",
                        "FileSystemRights": [ "FullControl" ],
                        "InheritanceFlags": [ "ContainerInherit", "ObjectInherit" ]
                    }
                ]
            }
        },
        "InstallServices": {
            "Description": "Installs the service.",
            "Type": "Command",
            "Params": [
                {
                    "Path": "[joinpath(variable('Services.IndexWorker.InstallPath'), 'XConnectSearchIndexer.exe')]",
                    "Arguments": [ "-i", "[variable('Services.IndexWorker.Name')]" ]
                },
                {
                    "Path": "[joinpath(variable('Services.MarketingAutomationEngine.InstallPath'), 'maengine.exe')]",
                    "Arguments": [ "-i", "[variable('Services.MarketingAutomationEngine.Name')]" ]
                },
                {
                    "Path": "[joinpath(variable('Services.ProcessingEngine.InstallPath'), 'Sitecore.ProcessingEngine.exe')]",
                    "Arguments": [ "-i", "[variable('Services.ProcessingEngine.Name')]" ]
                }
            ]
        },
        "StartServices": {
            "Description": "Starts the service.",
            "Type": "ManageService",
            "Params": [
                {
                    "Name": "[variable('Services.IndexWorker.Name')]",
                    "Status": "Running"
                },
                {
                    "Name": "[variable('Services.MarketingAutomationEngine.Name')]",
                    "Status": "Running"
                },
                {
                    "Name": "[variable('Services.ProcessingEngine.Name')]",
                    "Status": "Running"
                }
            ]
        },
        "StartAppPool": {
            "Description": "Starts the app pool.",
            "Type": "ManageAppPool",
            "Params": {
                "Name": "[parameter('SiteName')]",
                "Action": "Start"
            }
        },
        "StartWebsite": {
            "Description": "Starts the website.",
            "Type": "ManageWebsite",
            "Params": {
                "Name": "[parameter('SiteName')]",
                "Action": "Start"
            }
        },
        "ConfigureSolrSchemas": {
            "Description": "Applies schema to the new cores.",
            "Type": "ManageSolrSchema",
            "Params": [
                {
                    "Address": "[parameter('SolrUrl')]",
                    "Core": "[variable('Xdb.Name')]",
                    "ArgumentsFile": "[variable('Solr.Config.Path')]"
                },
                {
                    "Address": "[parameter('SolrUrl')]",
                    "Core": "[variable('Xdb.Rebuild.Name')]",
                    "ArgumentsFile": "[variable('Solr.Config.Path')]"
                }
            ]
        }
    }
}